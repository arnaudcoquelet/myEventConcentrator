{
  "name": "ejdb",
  "version": "1.1.23",
  "config": {
    "windownloadurl_ia32": "http://dl.dropboxusercontent.com/u/4709222/ejdb/tcejdb-1.1.23-mingw32-i686.zip",
    "windownloadurl_x64": "http://dl.dropboxusercontent.com/u/4709222/ejdb/tcejdb-1.1.23-mingw32-x86_64.zip"
  },
  "main": "node/ejdb.js",
  "homepage": "http://ejdb.org",
  "description": "EJDB - Embedded JSON Database engine",
  "keywords": [
    "ejdb",
    "tokyocabinet",
    "nosql",
    "database",
    "storage",
    "embedded",
    "mongodb",
    "cli",
    "json"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Softmotions/ejdb.git"
  },
  "bugs": {
    "url": "https://github.com/Softmotions/ejdb/issues"
  },
  "os": [
    "linux",
    "darwin",
    "sunos",
    "win32"
  ],
  "engines": {
    "node": "0.8.x || 0.10.x"
  },
  "dependencies": {
    "nodeunit": ">=0.7.0"
  },
  "scripts": {
    "preinstall": "node node/platform.js preinstall",
    "test": "node node/platform.js test"
  },
  "bin": {
    "ejdb": "node/bin/cli.js"
  },
  "author": {
    "name": "Anton Adamansky",
    "email": "adamansky@gmail.com"
  },
  "licenses": [
    {
      "type": "LGPL",
      "url": "https://github.com/Softmotions/ejdb/blob/master/LICENSE"
    }
  ],
  "contributors": [
    {
      "name": "Mikio Hirabayashi",
      "email": "mikio@fallabs.com",
      "url": "http://fallabs.com/mikio/"
    }
  ],
  "readme": "[![EJDB](https://raw.github.com/Softmotions/ejdb/master/misc/ejdblogo3.png)](http://ejdb.org)\n\n\nEmbedded JSON Database engine\n====================================\n\nIt aims to be a fast [MongoDB](http://mongodb.org)-like library **which can be embedded into C/C++, .Net, NodeJS, Python, Lua, Go, Java and Ruby applications under terms of LGPL license.**\n\nEJDB is the C library based on modified version of [Tokyo Cabinet](http://fallabs.com/tokyocabinet/).\n\nJSON representation of queries and data implemented with API based on [C BSON](https://github.com/mongodb/mongo-c-driver/tree/master/src/)\n\nNews\n===============================\n* `2013-08-19` **[v1.1.19 Added support the long awaited mongodb update positional operator] (https://github.com/Softmotions/ejdb/wiki/V1.1.19)**\n* `2013-08-11` **[v1.1.18 Added support for mongodb $ projection] (https://github.com/Softmotions/ejdb/wiki/V1.1.18)**\n* `2013-08-08` **[v1.1.17 Now supported $and & $or mongodb operators] (https://github.com/Softmotions/ejdb/issues/81)**\n* `2013-07-15` **[Google Go binding] (https://github.com/mkilling/goejdb)**\n* `2013-06-23` **[C# .Net binding] (https://github.com/Softmotions/ejdb/tree/master/nejdb)**\n* `2013-06-02` **[Adobe Air Native Extension (ANE) for EJDB (Thanks to @thejustinwalsh)] (https://github.com/thejustinwalsh/airejdb)**\n* `2013-05-29` **[EJDB Python 2.7.x binding available](https://github.com/Softmotions/ejdb/blob/master/pyejdb/)**\n* `2013-05-06` **[Ruby binding available](https://github.com/Softmotions/ejdb/blob/master/rbejdb/README.md)**\n* `2013-05-02` **[NodeJS win32 module available](https://github.com/Softmotions/ejdb/blob/master/tcejdb/WIN32.md#ejdb-nodejs-module-installation)**\n* `2013-04-25` **[EJDB and TokyoCabinet API ported to Windows](https://github.com/Softmotions/ejdb/blob/master/tcejdb/WIN32.md)**\n* `2013-04-03` **[Java API binding available](https://github.com/Softmotions/ejdb/blob/master/jejdb/)**\n* `2013-03-20` **[Lua binding available](https://github.com/Softmotions/ejdb/blob/master/luaejdb/)**\n* `2013-02-15` **[EJDB Python3 binding available](https://github.com/Softmotions/ejdb/blob/master/pyejdb/)**\n* `2013-02-07` **[Debian packages provided](https://github.com/Softmotions/ejdb/wiki/Debian-Ubuntu-installation)**\n* `2013-01-22` **[Collection joins now supported](https://github.com/Softmotions/ejdb/wiki/Collection-joins)**\n\nFeatures\n================================\n* LGPL license allows you to embed this library into proprietary software.\n* [EJDB and TokyoCabinet API ported to Windows](https://github.com/Softmotions/ejdb/blob/master/tcejdb/WIN32.md)\n* MongoDB-like queries and overall philosophy.\n* [Collection joins](https://github.com/Softmotions/ejdb/wiki/Collection-joins)\n* Collection level write locking.\n* Collection level transactions.\n* Node.js/Python/Lua/Java/Ruby/.Net/Go bindings\n* [Adobe Air Native Extension (ANE) for EJDB] (https://github.com/thejustinwalsh/airejdb)\n* [Pike language binding] (https://github.com/hww3/pike_modules-ejdb)\n\nDocumentation\n================================\n\n* **[The brief intro to the EJDB](http://blog.abigopal.com/post/51616277039/ejdb)**\n* **[EJDB Command line interface](https://github.com/Softmotions/ejdb/wiki/EJDB-Command-line-interface)**\n* **[EJDB C Library](#ejdb-c-library)**\n    * [Building & Installation](#building--installation)\n    * [Samples](#ejdb-c-samples)\n    * [C API](#c-api)\n* **[Data Import/Export](https://github.com/Softmotions/ejdb/wiki/Data-Import-Export)**\n* **[Collection joins](https://github.com/Softmotions/ejdb/wiki/Collection-joins)**\n* **[Development FAQ](https://github.com/Softmotions/ejdb/wiki/Development-FAQ)**\n* **Bindings**\n    * **[C# .Net] (https://github.com/Softmotions/ejdb/tree/master/nejdb)**\n    * **[NodeJS] (https://github.com/Softmotions/ejdb/blob/master/node/)**\n    * **[Python 2.7/3.x](https://github.com/Softmotions/ejdb/blob/master/pyejdb/)**\n    * **[Lua](https://github.com/Softmotions/ejdb/blob/master/luaejdb/)**\n    * **[Java](https://github.com/Softmotions/ejdb/blob/master/jejdb/)**\n    * **[Ruby](https://github.com/Softmotions/ejdb/blob/master/rbejdb/)**\n    * **[Objective-C](https://github.com/johnnyd/EJDBKit)**\n    * **[Go](https://github.com/mkilling/goejdb/)**\n    * **[Pike language] (https://github.com/hww3/pike_modules-ejdb)**\n    * **[Adobe Air] (https://github.com/thejustinwalsh/airejdb)**\n\n\n\nCommunity\n================================\n* **[ejdblab@twitter.com](https://twitter.com/ejdblab)**\n* **We use [EJDB Google group](http://groups.google.com/group/ejdb) as our mailing list.**\n* [Projects using EJDB](https://github.com/Softmotions/ejdb/wiki/Projects-using-EJDB)\n\nEJDB NodeJS\n=================================\n\nOne snippet intro\n---------------------------------\n\n```JavaScript\nvar EJDB = require(\"ejdb\");\n//Open zoo DB\nvar jb = EJDB.open(\"zoo\", EJDB.DEFAULT_OPEN_MODE | EJDB.JBOTRUNC);\n\nvar parrot1 = {\n    \"name\" : \"Grenny\",\n    \"type\" : \"African Grey\",\n    \"male\" : true,\n    \"age\" : 1,\n    \"birthdate\" : new Date(),\n    \"likes\" : [\"green color\", \"night\", \"toys\"],\n    \"extra1\" : null\n};\nvar parrot2 = {\n    \"name\" : \"Bounty\",\n    \"type\" : \"Cockatoo\",\n    \"male\" : false,\n    \"age\" : 15,\n    \"birthdate\" : new Date(),\n    \"likes\" : [\"sugar cane\"]\n};\n\njb.save(\"parrots\", [parrot1, parrot2], function(err, oids) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(\"Grenny OID: \" + parrot1[\"_id\"]);\n    console.log(\"Bounty OID: \" + parrot2[\"_id\"]);\n\n    jb.find(\"parrots\",\n            {\"likes\" : \"toys\"},\n            {\"$orderby\" : {\"name\" : 1}},\n            function(err, cursor, count) {\n                if (err) {\n                    console.error(err);\n                    return;\n                }\n                console.log(\"Found \" + count + \" parrots\");\n                while (cursor.next()) {\n                    console.log(cursor.field(\"name\") + \" likes toys!\");\n                }\n                cursor.close(); //It's not mandatory to close cursor explicitly\n                jb.close(); //Close the database\n            });\n});\n```\n**[EJDB NodeJS binding page](https://github.com/Softmotions/ejdb/blob/master/node)**\n\nEJDB Python\n==================================\n\nOne snippet intro\n---------------------------------\n\n```python\nimport pyejdb\nfrom datetime import datetime\n\n#Open database\nejdb = pyejdb.EJDB(\"zoo\", pyejdb.DEFAULT_OPEN_MODE | pyejdb.JBOTRUNC)\n\nparrot1 = {\n    \"name\": \"Grenny\",\n    \"type\": \"African Grey\",\n    \"male\": True,\n    \"age\": 1,\n    \"birthdate\": datetime.utcnow(),\n    \"likes\": [\"green color\", \"night\", \"toys\"],\n    \"extra1\": None\n}\nparrot2 = {\n    \"name\": \"Bounty\",\n    \"type\": \"Cockatoo\",\n    \"male\": False,\n    \"age\": 15,\n    \"birthdate\": datetime.utcnow(),\n    \"likes\": [\"sugar cane\"],\n    \"extra1\": None\n}\nejdb.save(\"parrots2\", parrot1, parrot2)\n\nwith ejdb.find(\"parrots2\", {\"likes\" : \"toys\"},\n          hints={\"$orderby\" : [(\"name\", 1)]}) as cur:\n    print(\"found %s parrots\" % len(cur))\n    for p in cur:\n        print(\"%s likes toys!\" % p[\"name\"])\n\nejdb.close()\n```\n**[EJDB Python 2.7/3.x binding page](https://github.com/Softmotions/ejdb/blob/master/pyejdb)**\n\nEJDB Lua\n==================================\n\nOne snippet intro\n---------------------------------\n\n```lua\nlocal ejdb = require(\"ejdb\")\nlocal inspect = require(\"ejdb.inspect\")\nlocal Q = ejdb.Q\n\n-- Used modes:\n-- 'r' - read\n-- 'w' - write\n-- 'c' - create db if not exists\n-- 't' - truncate existing db\nlocal db = ejdb.open(\"zoo\", \"rwct\")\n\n-- Unordered lua table\nlocal parrot1 = {\n  name = \"Grenny\",\n  type = \"African Grey\",\n  male = true,\n  age = 1,\n  birthhdate = ejdb.toDateNow(),\n  likes = { \"green color\", \"night\", \"toys\" },\n  extra1 = ejdb.toNull()\n}\n\n-- Preserve order of BSON keys\nlocal parrot2 = Q();\nparrot2:KV(\"name\", \"Bounty\"):KV(\"type\", \"Cockatoo\"):KV(\"male\", false)\nparrot2:KV(\"age\", 15):KV(\"birthdate\",\n  ejdb.toDate({ year = 2013, month = 1, day = 1, hour = 0, sec = 1 }))\nparrot2:KV(\"likes\", { \"sugar cane\" }):KV(\"extra1\", ejdb.toNull())\n\n--IF YOU WANT SOME DATA INSPECTIONS:\n--print(ejdb.print_bson(parrot2:toBSON()))\n--local obj = ejdb.from_bson(parrot2:toBSON())\n--print(inspect(obj));\n\ndb:save(\"parrots2\", parrot1)\ndb:save(\"parrots2\", parrot2)\n\n-- Below two equivalent queries:\n-- Q1\nlocal res, count, log =\ndb:find(\"parrots2\", Q(\"likes\", \"toys\"):OrderBy(\"name asc\", \"age desc\"))\nfor i = 1, #res do -- iterate one\n  local ob = res:object(i)\n  print(\"\" .. ob[\"name\"] .. \" likes toys #1\")\nend\n\n-- Q2\nlocal res, count, log =\ndb:find(\"parrots2\", Q():F(\"likes\"):Eq(\"toys\"):OrderBy({ name = 1 }, { age = -1 }))\nfor i = 1, #res do -- iterate one\n  print(\"\" .. res:field(i, \"name\") .. \" likes toys #2\")\nend\n\n-- Second way to iterate\nfor vobj, idx in res() do\n  print(\"\" .. vobj[\"name\"] .. \" likes toys #3\")\nend\n\ndb:close()\n```\n**[EJDB Lua binding page](https://github.com/Softmotions/ejdb/blob/master/luaejdb)**\n\nEJDB Go\n==================================\n\nOne snippet intro\n-----------------------------------\n\n```go\npackage ejdbtutorial\n\nimport (\n    \"fmt\"\n    \"github.com/mkilling/goejdb\"\n    \"labix.org/v2/mgo/bson\"\n    \"os\"\n)\n\nfunc main() {\n    // Create a new database file and open it\n    jb, err := goejdb.Open(\"addressbook\", JBOWRITER | JBOCREAT | JBOTRUNC)\n    if err != nil {\n        os.Exit(1)\n    }\n    // Get or create collection 'contacts'\n    coll, _ := jb.CreateColl(\"contacts\", nil)\n\n    // Insert one record:\n    // JSON: {'name' : 'Bruce', 'phone' : '333-222-333', 'age' : 58}\n    rec := map[string]interface{} {\"name\" : \"Bruce\", \"phone\" : \"333-222-333\", \"age\" : 58}\n    bsrec, _ := bson.Marshal(rec)\n    coll.SaveBson(bsrec)\n    fmt.Printf(\"\\nSaved Bruce\")\n\n    // Now execute query\n    res, _ := coll.Find(`{\"name\" : {\"$begin\" : \"Bru\"}}`) // Name starts with 'Bru' string\n    fmt.Printf(\"\\n\\nRecords found: %d\\n\", len(res))\n\n    // Now print the result set records\n    for _, bs := range res {\n        var m map[string]interface{}\n        bson.Unmarshal(bs, &m)\n        fmt.Println(m)\n    }\n\n    // Close database\n    jb.Close()\n}\n```\n**[EJDB Go binding page](https://github.com/mkilling/goejdb)**\n\n\nEJDB Ruby\n==================================\n\nOne snippet intro\n---------------------------------\n\n```Ruby\nrequire \"rbejdb\"\n\n#Open zoo DB\njb = EJDB.open(\"zoo\", EJDB::DEFAULT_OPEN_MODE | EJDB::JBOTRUNC)\n\nparrot1 = {\n    \"name\" => \"Grenny\",\n    \"type\" => \"African Grey\",\n    \"male\" => true,\n    \"age\" => 1,\n    \"birthdate\" => Time.now,\n    \"likes\" => [\"green color\", \"night\", \"toys\"],\n    \"extra1\" => nil\n}\nparrot2 = {\n    \"name\" => \"Bounty\",\n    \"type\" => \"Cockatoo\",\n    \"male\" => false,\n    \"age\" => 15,\n    \"birthdate\" => Time.now,\n    \"likes\" => [\"sugar cane\"],\n    \"extra1\" => nil\n}\n\njb.save(\"parrots\", parrot1, parrot2)\nputs \"Grenny OID: #{parrot1[\"_id\"]}\"\nputs \"Bounty OID: #{parrot2[\"_id\"]}\"\n\nresults = jb.find(\"parrots\", {\"likes\" => \"toys\"}, {\"$orderby\" => {\"name\" => 1}})\n\nputs \"Found #{results.count} parrots\"\n\nresults.each { |res|\n  puts \"#{res['name']} likes toys!\"\n}\n\nresults.close #It's not mandatory to close cursor explicitly\njb.close #Close the database\n\n```\n**[EJDB Ruby binding page](https://github.com/Softmotions/ejdb/blob/master/rbejdb/)**\n\n\nEJDB Adobe AIR\n==================================\n\nOne snippet intro\n---------------------------------\n\n```as3\n// Open the zoo DB\nvar db:EJDBDatabase = EJDB.open(\"zoo\", EJDB.DEFAULT_OPEN_MODE | EJDB.JBOTRUNC) as EJDBDatabase;\n\nvar parrot1:Object = {\n\t\"name\" : \"Grenny\",\n\t\"type\" : \"African Grey\",\n\t\"male\" : true,\n\t\"age\" : 1,\n\t\"birthdate\" : new Date(),\n\t\"likes\" : [\"green color\", \"night\", \"toys\"],\n\t\"extra1\" : null\n};\nvar parrot2:Object = {\n\t\"name\" : \"Bounty\",\n\t\"type\" : \"Cockatoo\",\n\t\"male\" : false,\n\t\"age\" : 15,\n\t\"birthdate\" : new Date(),\n\t\"likes\" : [\"sugar cane\"]\n};\n\nvar oids:Array = db.save(\"parrots\", [parrot1, parrot2]);\ntrace(\"Grenny OID: \" + parrot1._id);\ntrace(\"Bounty OID: \" + parrot2._id);\n\nvar cursor:EJDBCursor = db.find(\"parrots\",\n\t{\"likes\" : \"toys\"},\n\t[],\n\t{\"$orderby\" : {\"name\" : 1}}\n);\n\ntrace(\"Found \" + cursor.length + \" parrots\");\nwhile (cursor.next()) {\n\ttrace(cursor.field(\"name\") + \" likes toys!\");\n}\n\ncursor.close(); // It IS mandatory to close cursor explicitly to free up resources\ndb.close(); // Close the database\n```\n**[Adobe Air Native Extension (ANE) for EJDB] (https://github.com/thejustinwalsh/airejdb)**\n\nEJDB C Library\n==================================\n\nOne snippet intro\n-----------------------------------\n\n```C\n#include <tcejdb/ejdb.h>\n\nstatic EJDB *jb;\n\nint main() {\n    jb = ejdbnew();\n    if (!ejdbopen(jb, \"addressbook\", JBOWRITER | JBOCREAT | JBOTRUNC)) {\n        return 1;\n    }\n    //Get or create collection 'contacts'\n    EJCOLL *coll = ejdbcreatecoll(jb, \"contacts\", NULL);\n\n    bson bsrec;\n    bson_oid_t oid;\n\n    //Insert one record:\n    //JSON: {'name' : 'Bruce', 'phone' : '333-222-333', 'age' : 58}\n    bson_init(&bsrec);\n    bson_append_string(&bsrec, \"name\", \"Bruce\");\n    bson_append_string(&bsrec, \"phone\", \"333-222-333\");\n    bson_append_int(&bsrec, \"age\", 58);\n    bson_finish(&bsrec);\n    //Save BSON\n    ejdbsavebson(coll, &bsrec, &oid);\n    fprintf(stderr, \"\\nSaved Bruce\");\n    bson_destroy(&bsrec);\n\n    //Now execute query\n    //QUERY: {'name' : {'$begin' : 'Bru'}} //Name starts with 'Bru' string\n    bson bq1;\n    bson_init_as_query(&bq1);\n    bson_append_start_object(&bq1, \"name\");\n    bson_append_string(&bq1, \"$begin\", \"Bru\");\n    bson_append_finish_object(&bq1);\n    bson_finish(&bq1);\n\n    EJQ *q1 = ejdbcreatequery(jb, &bq1, NULL, 0, NULL);\n\n    uint32_t count;\n    TCLIST *res = ejdbqryexecute(coll, q1, &count, 0, NULL);\n    fprintf(stderr, \"\\n\\nRecords found: %d\\n\", count);\n\n    //Now print the result set records\n    for (int i = 0; i < TCLISTNUM(res); ++i) {\n        void *bsdata = TCLISTVALPTR(res, i);\n        bson_print_raw(bsdata, 0);\n    }\n    fprintf(stderr, \"\\n\");\n\n    //Dispose result set\n    tclistdel(res);\n\n    //Dispose query\n    ejdbquerydel(q1);\n    bson_destroy(&bq1);\n\n    //Close database\n    ejdbclose(jb);\n    ejdbdel(jb);\n    return 0;\n}\n```\n\nYou can save this code in `csnippet.c` And build:\n\n```sh\ngcc -std=c99 -Wall -pedantic  -c -o csnippet.o csnippet.c\ngcc -o csnippet csnippet.o -ltcejdb\n```\n\nBuilding & Installation\n--------------------------------\n * [Installation on windows](https://github.com/Softmotions/ejdb/blob/master/tcejdb/WIN32.md)\n * [Installation on Debian/Ubuntu](https://github.com/Softmotions/ejdb/wiki/Debian-Ubuntu-installation)\n\nManual installation\n-------------------------------\n\n### Prerequisites\n**System libraries:**\n\n* gcc\n* zlib-dev\n\n### Build and install\n\n```sh\n   cd ./tcejdb\n   ./configure --prefix=<installation prefix> && make && make check\n   make install\n```\n* library name: **tcejdb** (with pkgconfig)\n* main include header: ```<tcejdb/ejdb.h>```\n\nC API\n---------------------------------\nEJDB API presented in **[ejdb.h](https://github.com/Softmotions/ejdb/blob/master/tcejdb/ejdb.h)** C header file.\n\nJSON processing API: **[bson.h](https://github.com/Softmotions/ejdb/blob/master/tcejdb/bson.h)**\n\nQueries\n---------------------------------\n\n~~~~~~\n/**\n * Create query object.\n * Sucessfully created queries must be destroyed with ejdbquerydel().\n *\n * EJDB queries inspired by MongoDB (mongodb.org) and follows same philosophy.\n *\n *  - Supported queries:\n *      - Simple matching of String OR Number OR Array value:\n *          -   {'fpath' : 'val', ...}\n *      - $not Negate operation.\n *          -   {'fpath' : {'$not' : val}} //Field not equal to val\n *          -   {'fpath' : {'$not' : {'$begin' : prefix}}} //Field not begins with val\n *      - $begin String starts with prefix\n *          -   {'fpath' : {'$begin' : prefix}}\n *      - $gt, $gte (>, >=) and $lt, $lte for number types:\n *          -   {'fpath' : {'$gt' : number}, ...}\n *      - $bt Between for number types:\n *          -   {'fpath' : {'$bt' : [num1, num2]}}\n *      - $in String OR Number OR Array val matches to value in specified array:\n *          -   {'fpath' : {'$in' : [val1, val2, val3]}}\n *      - $nin - Not IN\n *      - $strand String tokens OR String array val matches all tokens in specified array:\n *          -   {'fpath' : {'$strand' : [val1, val2, val3]}}\n *      - $stror String tokens OR String array val matches any token in specified array:\n *          -   {'fpath' : {'$stror' : [val1, val2, val3]}}\n *      - $exists Field existence matching:\n *          -   {'fpath' : {'$exists' : true|false}}\n *      - $icase Case insensitive string matching:\n *          -    {'fpath' : {'$icase' : 'val1'}} //icase matching\n *          Ignore case matching with '$in' operation:\n *          -    {'name' : {'$icase' : {'$in' : ['tHéâtre - театр', 'heLLo WorlD']}}}\n *          For case insensitive matching you can create special index of type: `JBIDXISTR`\n *     - $elemMatch The $elemMatch operator matches more than one component within an array element.\n *          -  { array: { $elemMatch: { value1 : 1, value2 : { $gt: 1 } } } }\n *          Restriction: only one $elemMatch allowed in context of one array field.\n *      - $and, $or joining:\n *          -   {..., $and : [subq1, subq2, ...] }\n *          -   {..., $or  : [subq1, subq2, ...] }\n *          Example: {z : 33, $and : [ {$or : [{a : 1}, {b : 2}]}, {$or : [{c : 5}, {d : 7}]} ] }\n *\n *      - Mongodb $(projection) operator supported. (http://docs.mongodb.org/manual/reference/projection/positional/#proj._S_)\n *      - Mongodb positional $ update operator supported. (http://docs.mongodb.org/manual/reference/operator/positional/)\n *\n *\n *  - Queries can be used to update records:\n *       $set Field set operation.\n *           - {.., '$set' : {'field1' : val1, 'fieldN' : valN}}\n *       $upsert Atomic upsert. If matching records are found it will be '$set' operation,\n *              otherwise new record will be inserted with fields specified by argment object.\n *           - {.., '$upsert' : {'field1' : val1, 'fieldN' : valN}}\n *       $inc Increment operation. Only number types are supported.\n *           - {.., '$inc' : {'field1' : number, ...,  'field1' : number}\n *       $dropall In-place record removal operation.\n *           - {.., '$dropall' : true}\n *       $addToSet Atomically adds value to the array only if its not in the array already.\n *                    If containing array is missing it will be created.\n *           - {.., '$addToSet' : {'fpath' : val1, 'fpathN' : valN, ...}}\n *       $addToSetAll Batch version if $addToSet\n *           - {.., '$addToSetAll' : {'fpath' : [array of values to add], ...}}\n *       $pull Atomically removes all occurrences of value from field, if field is an array.\n *           - {.., '$pull' : {'fpath' : val1, 'fpathN' : valN, ...}}\n *       $pullAll Batch version of $pull\n *           - {.., '$pullAll' : {'fpath' : [array of values to remove], ...}}\n *\n *  NOTE: Negate operations: $not and $nin not using indexes\n *  so they can be slow in comparison to other matching operations.\n *\n *  NOTE: Only one index can be used in search query operation.\n *\n *  QUERY HINTS (specified by `hints` argument):\n *      - $max Maximum number in the result set\n *      - $skip Number of skipped results in the result set\n *      - $orderby Sorting order of query fields.\n *      - $fields Set subset of fetched fields\n            If a field presented in $orderby clause it will be forced to include in resulting records.\n *          Example:\n *          hints:    {\n *                      \"$orderby\" : { //ORDER BY field1 ASC, field2 DESC\n *                          \"field1\" : 1,\n *                          \"field2\" : -1\n *                      },\n *                      \"$fields\" : { //SELECT ONLY {_id, field1, field2}\n *                          \"field1\" : 1,\n *                          \"field2\" : 1\n *                      }\n *                    }\n *\n * Many query examples can be found in `testejdb/t2.c` test case.\n *\n * @param EJDB database handle.\n * @param qobj Main BSON query object.\n * @param orqobjs Array of additional OR query objects (joined with OR predicate).\n * @param orqobjsnum Number of OR query objects.\n * @param hints BSON object with query hints.\n * @return On success return query handle. On error returns NULL.\n */\nEJDB_EXPORT EJQ* ejdbcreatequery(EJDB *jb, bson *qobj, bson *orqobjs, int orqobjsnum, bson *hints);\n~~~~~~\n\nEJDB C Samples\n------------------------------------\nYou can find some code samples in:\n\n* [tcejdb/samples](https://github.com/Softmotions/ejdb/tree/master/tcejdb/samples)\n* [tcejdb/testejdb](https://github.com/Softmotions/ejdb/tree/master/tcejdb/testejdb)\n\nBasic EJDB architecture\n------------------------------------\n**EJDB database files structure**\n\n~~~~~~\n.\n├── <dbname>\n├── <dbname>_<collection1>\n├── ...\n├── <dbname>_<collectionN>\n└── <dbname>_<collectionN>_<fieldpath>.<index ext>\n~~~~~~\n\nWhere\n\n* ```<dbname>``` - name of database. It is metadata DB.\n* ```<collectionN>``` - name of collection. Collection database.\n* ```<fieldpath>``` - JSON field path used in index\n* ```<index ext>``` - Collection index extension:\n    * ```.lex``` String index\n    * ```.dec``` Number index\n    * ```.tok``` Array index\n\nLimitations\n------------------------------------\n* One ejdb database can handle up to 1024 collections.\n* Indexes for objects in nested arrays currently not supported (#37)\n\nTODO\n------------------------------------\n* Collect collection index statistic\n",
  "_id": "ejdb@1.1.23",
  "_from": "ejdb"
}
